"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@nestjs/common");
const crypto = require("crypto");
let AesGcmService = class AesGcmService {
    constructor(key) {
        this.key = key;
    }
    generateRandomKey() {
        return crypto.randomBytes(32).toString('base64');
    }
    encrypt(data, secretKey = this.key) {
        const iv = crypto.randomBytes(16);
        const salt = crypto.randomBytes(64);
        const key = crypto.pbkdf2Sync(secretKey, salt, 2145, 32, 'sha512');
        const cipher = crypto.createCipheriv('aes-256-gcm', key, iv);
        const encrypted = Buffer.concat([cipher.update(data, 'utf8'), cipher.final()]);
        const tag = cipher.getAuthTag();
        return Buffer.concat([salt, iv, tag, encrypted]).toString('base64');
    }
    decrypt(encrypted, secretKey = this.key) {
        const bData = Buffer.from(encrypted, 'base64');
        const salt = bData.slice(0, 64);
        const iv = bData.slice(64, 80);
        const tag = bData.slice(80, 96);
        const text = bData.slice(96);
        const key = crypto.pbkdf2Sync(secretKey, salt, 2145, 32, 'sha512');
        const decipher = crypto.createDecipheriv('aes-256-gcm', key, iv);
        decipher.setAuthTag(tag);
        return decipher.update(text, 'binary', 'utf8') + decipher.final('utf8');
    }
    md5(data) {
        return crypto.createHash('md5').update(data).digest('hex');
    }
};
AesGcmService = __decorate([
    common_1.Injectable(),
    __param(0, common_1.Inject('AES_SECRET_KEY')),
    __metadata("design:paramtypes", [String])
], AesGcmService);
exports.AesGcmService = AesGcmService;
//# sourceMappingURL=aes-gcm.service.js.map